{"version":3,"file":"static/js/278.b2417714.chunk.js","mappings":"8SAEMA,EAAU,mCACVC,EAAW,gCAGJC,EAAkB,mCAAG,oGACTC,EAAAA,GAAAA,IAAU,GAAD,OAC3BF,EAAQ,oCAA4BD,IACvC,KAAD,EAFa,OAARI,EAAQ,yBAGPA,EAASC,KAAKC,SAAO,2CAC7B,kBAL8B,mCASlBC,EAAiB,mCAAG,WAAMC,GAAE,uFAChBL,EAAAA,GAAAA,IAAU,GAAD,OAAIF,EAAQ,iBAASO,EAAE,oBAAYR,IAAW,KAAD,EAA/D,OAARI,EAAQ,yBACPA,EAASC,MAAI,2CACrB,gBAH6B,sCAOjBI,EAAuB,mCAAG,WAAMC,GAAK,uFACzBP,EAAAA,GAAAA,IAAU,GAAD,OAC3BF,EAAQ,gCAAwBD,EAAO,kBAAUU,IACpD,KAAD,EAFa,OAARN,EAAQ,yBAGPA,EAASC,MAAI,2CACrB,gBALmC,sCASvBM,EAAO,mCAAG,WAAMH,GAAE,uFACNL,EAAAA,GAAAA,IAAU,GAAD,OAC3BF,EAAQ,kBAAUO,EAAE,4BAAoBR,EAAO,oBAClD,KAAD,EAFa,OAARI,EAAQ,yBAGPA,EAASC,MAAI,2CACrB,gBALmB,sCASPO,EAAU,mCAAG,WAAMJ,GAAE,uFACTL,EAAAA,GAAAA,IAAU,GAAD,OAC3BF,EAAQ,kBAAUO,EAAE,4BAAoBR,EAAO,2BAClD,KAAD,EAFa,OAARI,EAAQ,yBAGPA,EAASC,MAAI,2CACrB,gBALsB,qC,uFCgCvB,UAjEe,WAAO,IAAD,EACnB,GAA0BQ,EAAAA,EAAAA,UAAS,IAAG,eAA/BH,EAAK,KAAEI,EAAQ,KACtB,GAA0BD,EAAAA,EAAAA,UAAS,IAAG,eAA/BE,EAAK,KAAEC,EAAQ,KACtB,GAA8BH,EAAAA,EAAAA,YAAU,eAAjCI,EAAO,KAAEC,EAAU,KAE1B,GAAwCC,EAAAA,EAAAA,MAAiB,eAAlDC,EAAY,KAAEC,EAAe,KAC9BC,GAAWC,EAAAA,EAAAA,MACXC,EAAc,UAAMF,EAASG,UAAQ,OAAGH,EAASI,QAcjDC,EAAuC,QAA5B,EAAGP,EAAaQ,IAAI,gBAAQ,QAAI,GAkBjD,OAhBAC,EAAAA,EAAAA,YAAU,WACHF,IAGLT,EAAW,KACXT,EAAAA,EAAAA,IAAwBkB,GAAaG,MAAK,gBAAGxB,EAAO,EAAPA,QAAO,OAClDU,EAASV,EAAQ,IAErB,GAAG,CAACqB,KAEJE,EAAAA,EAAAA,YAAU,WACJF,IAAgBZ,EAAMgB,QACxBb,EAAW,yDAEf,GAAG,CAACH,EAAMgB,OAAQJ,KAGhB,iCACE,kBAAMK,SAhCU,SAAAC,GAClBA,EAAMC,iBACe,KAAjBxB,EAAMyB,SAMVnB,EAAS,IACTK,EAA0B,KAAVX,EAAe,CAAEA,MAAOA,GAAU,CAAC,GACnDI,EAAS,IACX,EAqBgC,WAC1B,kBACEsB,KAAK,OACLC,KAAK,aACLC,YAAY,gBACZC,MAAO7B,EACP8B,SAAU,SAAAP,GAAK,OAAInB,EAASmB,EAAMQ,cAAcF,MAAM,KAExD,mBAAQH,KAAK,SAAQ,wBAGrBrB,EAAMgB,SAAU,uBAAId,KACtB,wBACGF,EAAM2B,KAAI,gBAAGlC,EAAE,EAAFA,GAAImC,EAAK,EAALA,MAAON,EAAI,EAAJA,KAAI,OAC3B,yBACE,SAAC,KAAI,CAACO,GAAE,kBAAapC,GAAMqC,MAAO,CAAEC,KAAMtB,GAAiB,SACxDmB,GAASN,KAFL7B,EAIJ,QAKf,C","sources":["api/Api.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '8a5cfb4207c3746e6a8d5626ceb4bba0';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n// запрос за популярными фильмами\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/all/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\n// запрос на информацию о выбраном фильме\n\nexport const fetchSelectedFilm = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n};\n\n// запрос о поиске фильма по названию\n\nexport const fetchSelectedMovieTitle = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data;\n};\n\n// запрос о актерах выбраного фильма\n\nexport const getCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// запрос о отзывах про выбраный фильм\n\nexport const getReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n","import { fetchSelectedMovieTitle } from '../../api/Api';\n\nimport { Link } from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [films, setFilms] = useState([]);\n  const [message, setMessage] = useState();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const toBackLocation = `${location.pathname}${location.search}`;\n\n  const searchFilms = event => {\n    event.preventDefault();\n    if (query.trim() === '') {\n      return;\n      // setMessage(\n      //   'Nothing entered! To display films, enter a query in the search field'\n      // );\n    }\n    setFilms([]);\n    setSearchParams(query !== '' ? { query: query } : {});\n    setQuery('');\n  };\n  const searchQuery = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    setMessage('');\n    fetchSelectedMovieTitle(searchQuery).then(({ results }) =>\n      setFilms(results)\n    );\n  }, [searchQuery]);\n\n  useEffect(() => {\n    if (searchQuery && !films.length) {\n      setMessage('Sorry, nothing was found, please try your search again');\n    }\n  }, [films.length, searchQuery]);\n\n  return (\n    <>\n      <form onSubmit={searchFilms}>\n        <input\n          type=\"text\"\n          name=\"inputValue\"\n          placeholder=\"Search movies\"\n          value={query}\n          onChange={event => setQuery(event.currentTarget.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {!films.length && <p>{message}</p>}\n      <ul>\n        {films.map(({ id, title, name }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: toBackLocation }}>\n              {title || name}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default Movies;\n"],"names":["API_KEY","BASE_URL","fetchPopularMovies","axios","response","data","results","fetchSelectedFilm","id","fetchSelectedMovieTitle","query","getCast","getReviews","useState","setQuery","films","setFilms","message","setMessage","useSearchParams","searchParams","setSearchParams","location","useLocation","toBackLocation","pathname","search","searchQuery","get","useEffect","then","length","onSubmit","event","preventDefault","trim","type","name","placeholder","value","onChange","currentTarget","map","title","to","state","from"],"sourceRoot":""}